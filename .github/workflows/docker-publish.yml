name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - '**'

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

  release:
    types: [released, prereleased]

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: clusterio

jobs:
  # Build dependencies and clusterio image
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build docker image
        run: DOCKER_BUILDKIT=1 docker build . -t $IMAGE_NAME --target clusterio_final

      - name: Export docker image
        run: docker save -o clusterio_docker_image $IMAGE_NAME

      - name: Upload docker image
        uses: actions/upload-artifact@master
        with:
          name: clusterio_docker_image
          path: clusterio_docker_image
  # Build dependencies and clusterio image with test tooling
  build_testing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build docker image
        run: DOCKER_BUILDKIT=1 docker build . -t $IMAGE_NAME --target clusterio_testing

      - name: Export docker image
        run: docker save -o clusterio_docker_image_testing $IMAGE_NAME

      - name: Upload docker image
        uses: actions/upload-artifact@master
        with:
          name: clusterio_docker_image_testing
          path: clusterio_docker_image_testing
  # Upload clusterio_lib and subspace_storage versions
  upload_mods:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download docker image
        uses: actions/download-artifact@master
        with:
          name: clusterio_docker_image
          path: .

      - name: Load docker image
        run: docker load -i clusterio_docker_image
      
      - name: Create container
        run: docker create --name clusterio_container $IMAGE_NAME

      - name: Move mods out of container
        run: docker cp clusterio_container:/clusterio/sharedMods ./mods

      - name: Remove container
        run: docker rm clusterio_container

      - name: List extracted mods
        run: ls mods

      - name: Upload mods
        uses: actions/upload-artifact@master
        with:
          name: mods
          path: mods
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    needs: build_testing
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Download docker image
        uses: actions/download-artifact@master
        with:
          name: clusterio_docker_image_testing
          path: .
      - name: ls
        run: ls && ls clusterio_docker_image_testing && ls /home/runner/work/clusterio && ls /home/runner/work/clusterio/clusterio
      - name: Load docker image
        run: docker load -i clusterio_docker_image_testing

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml run unit_test
          else
            docker build . --file Dockerfile
          fi
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: [test, build]

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@master
        with:
          name: clusterio_docker_image
          path: .

      - name: Load docker image
        run: docker load -i clusterio_docker_image

      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.actor }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
